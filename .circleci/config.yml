version: 2.1

commands:
  install_awscli_node:
    steps:
      - run:
          name: "Installing AWS CLI in the Node containers"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_awscli_python:
    steps:
      - run:
          name: "Installing AWS CLI to get EC2 endpoints"
          command: |
            apk add --no-cache python py-pip
            pip install awscli
            aws --version
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          command: |
            aws cloudformation delete-stack --stack-name network-stack
            aws cloudformation delete-stack --stack-name backend-stack
            aws cloudformation delete-stack --stack-name cloudfront-stack
            aws cloudformation delete-stack --stack-name frontend-stack
          when: on_fail
  destroy_backend_frontend:
    steps:
      - run:
          name: Destroy environment
          command: |
            aws s3 rb s3://udapeople-websiteprod/ --force
            aws cloudformation delete-stack --stack-name frontend-stack
            aws cloudformation delete-stack --stack-name backend-stack
          when: on_fail  
  db_rollback:
    steps:
      - run:
          name: "DB Rollback"
          command: |
            cd backend
            npm install
            if 
              (( $( curl -H "token: e13a6cc4-3f08-4da7-9177-216b218d0341" --request GET https://api.memstash.io/values/migration_status ) == 0 )) ; \
            then 
              npm run migrations:revert
              echo "Reverting migrations"
            else
              echo "No migration to revert"
            fi
          when: on_fail
      - run:
          when: on_fail
          name: Prevents the workflow from continuing
          command: |
            circleci-agent step halt

jobs:
# JOBS TO BUILD, TEST AND ANALYZE THE FRONTEND AND BACKEND
  build-frontend:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build Front-End
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
              cd backend
              npm install
              npm audit --audit-level=critical || true

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
              cd frontend
              npm install
              npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
              cd backend
              npm install
              npm run test

  analyze:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
              cd backend
              npm audit fix --audit-level=critical --force
      - run:
          command: |
              cd frontend
              npm audit fix --audit-level=critical --force


# JOBS TO CREATE AND CONFIGURE THE INFRASCTUCTURE 
  create-infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Deploys the Network 
            command: |
              aws cloudformation deploy \
                --template-file ./.circleci/files/network.yml \
                --stack-name network-stack 
        - run:
            name: Deploys the Backend
            command: |
              aws cloudformation deploy \
                --template-file ./.circleci/files/backend.yml \
                --stack-name backend-stack
        - run:
            name: Deploys the Frontend
            command: |
              aws cloudformation deploy \
                --template-file ./.circleci/files/frontend.yml \
                --stack-name frontend-stack
        - run:
            name: Deploys the Cloudfront
            command: |
              aws cloudformation deploy \
                --template-file ./.circleci/files/cloudfront.yml \
                --stack-name cloudfront-stack
        - destroy_environment

  configure-infrastructure:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["ce:aa:95:32:b7:5b:24:36:05:81:38:d2:37:3e:d9:05"]
        
        - install_awscli_python
        - run:
            name: "Install dependencies"
            command: |
              apk add --update ansible
        - run:
            name: "Saving EC2 into inventory for Ansible"
            command: |
              cd .circleci/ansible
              echo "[web]" > inventory.txt
              inventory_address=$(aws ec2 --region us-east-1 describe-instances \
                --filters "Name=tag:Name,Values=backend-InstanceStack" \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text) 
              echo $inventory_address >> inventory.txt
              pwd
              cat inventory.txt
        - run:
            name: "Configure server"
            command: |
              echo "ec2-54-88-222-112.compute-1.amazonaws.com,54.88.222.112 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEW4hzELHmuDWqi2YfV1xwW4WW/Akaeum5ndnGyKeoCC1T/+Bd4yWyVxGiLg/BkeABNCTeQGz8cOx3RdC1LudL4=" >> ~/.ssh/known_hosts
              printenv >> "backend/.env"
              cd .circleci/ansible
              ansible-playbook main.yml -i inventory.txt

  frontend-s3-config:
        docker:
          - image: circleci/node:13.8.0
        steps:
          - checkout
          - install_awscli_node
          - run:
              name: "Build Front-End"
              command: |
                API_HOST=$(aws ec2 --region us-east-1 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text)
                echo $API_HOST
                cd frontend
                export API_URL=http://$API_HOST:3030
                echo $API_URL
                npm install
                npm run build
          - run:
              name: "Copying the FrontEnd files to S3"
              command: |
                aws s3 cp frontend/dist s3://udapeople-websiteprod/ --recursive

  cloudfront-invalidation:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Invalidating CloudFront files"
          command: | 
            aws cloudfront create-invalidation --distribution-id E2HDRR6VUBEYQM --paths "/*"

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - install_awscli_node
      - run:
          name: "Smoke Test on Backend"
          command: |
                export API_HOST=$(aws ec2 --region us-east-1 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text)
                echo $API_HOST
                curl "http://${API_HOST}:3030/api/status"
      - run:
          name: "Smoke Test on Frontend"
          command: |
                URL="http://udapeople-websiteprod.s3.amazonaws.com/index.html#/employees"
                if curl -s ${URL} | grep "Welcome"
                then
                  return 1
                else
                  return 0
                fi
      - destroy_backend_frontend
      - db_rollback   


workflows:
  build-test-and-approval-deploys:
    jobs:
#      - build-frontend
#      - build-backend
#      - test-frontend:
#          requires:
#            - build-frontend
#      - test-backend:
#          requires:
#            - build-backend
#      - analyze:
#          requires:
#            - test-frontend
#            - test-backend
#      - create-infrastructure
#          requires:
#            - analyze
      - configure-infrastructure
#          requires:
#            - create-infrastructure
      - frontend-s3-config:
          requires:
            - configure_infrastructure
      - cloudfront-invalidation:
          requires:
            - frontend-s3-config
      - smoke-test:
          requires:
            - cloudfront-invalidation
